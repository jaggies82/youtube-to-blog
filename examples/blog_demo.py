"""Example script demonstrating blog management functionality in the package."""
import asyncio
import os
import sys
from pathlib import Path

# Add the package root to the Python path
package_root = Path(__file__).parent.parent
sys.path.append(str(package_root))

from com.brykly.output_management.blog import BlogManager
from com.brykly.utils.config import ConfigManager

async def demonstrate_blog_management():
    """Demonstrate blog management features."""
    print("Starting blog management demonstration...")
    
    # Initialize configuration
    config_path = os.path.join(os.getcwd(), 'config.yaml')
    config = ConfigManager(config_path)
    
    # Create blog manager
    blog_manager = BlogManager(config)
    
    # Example blog post content
    blog_content = """# Test Blog Post

This is a test blog post generated by the Agentic Fun package.

## Introduction

This section demonstrates the blog post generation capabilities.

## Main Content

The package can generate well-structured blog posts from video transcripts.

## Conclusion

Thank you for reading this test blog post!"""

    try:
        # Save blog post
        print("\nSaving blog post...")
        blog_path = await blog_manager.save_blog_post(
            content=blog_content,
            title="Test Blog Post",
            author="Agentic Fun",
            tags=["test", "demo", "blog"]
        )
        print(f"✓ Successfully saved blog post to: {blog_path}")
        
        # Load blog post
        print("\nLoading blog post...")
        loaded_post = await blog_manager.load_blog_post(blog_path)
        print("✓ Successfully loaded blog post")
        print(f"Title: {loaded_post['title']}")
        print(f"Author: {loaded_post['author']}")
        print(f"Tags: {', '.join(loaded_post['tags'])}")
        
        # Generate metadata
        print("\nGenerating metadata...")
        metadata = await blog_manager.generate_metadata(blog_content)
        print("✓ Successfully generated metadata")
        print(f"Word count: {metadata['word_count']}")
        print(f"Reading time: {metadata['reading_time']} minutes")
        
        # Update blog post
        print("\nUpdating blog post...")
        updated_content = blog_content + "\n\n## Additional Section\n\nThis is an updated section."
        await blog_manager.update_blog_post(blog_path, updated_content)
        print("✓ Successfully updated blog post")
        
        # List blog posts
        print("\nListing blog posts...")
        posts = await blog_manager.list_blog_posts()
        print("Blog posts:")
        for post in posts:
            print(f"- {post['title']} ({post['date']})")
        
        # Delete blog post
        print("\nDeleting blog post...")
        await blog_manager.delete_blog_post(blog_path)
        print("✓ Successfully deleted blog post")
        
    except Exception as e:
        print(f"✗ Blog management error: {str(e)}")
    
    print("\nBlog management demonstration completed!")

if __name__ == "__main__":
    asyncio.run(demonstrate_blog_management()) 